-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 285E;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2938;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : 28AF;  -- 	JUMP	UARTin      ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : DEAD;  -- DEAD:  DW &HDEAD   ; Example of a "local" variable
           006 : 0000;  -- DTheta:    DW 0
           007 : 0000;  -- DVel:      DW 0
           008 : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           009 : 0000;  -- CMAL:    DW 0      ; holds temp left velocity
           00A : 0000;  -- CMAR:    DW 0      ; holds temp right velocity
           00B : 01FE;  -- MaxVal: DW 510
           00C : 0000;  -- AtanX:      DW 0
           00D : 0000;  -- AtanY:      DW 0
           00E : 0000;  -- AtanRatio:  DW 0        ; =y/x
           00F : 0000;  -- AtanT:      DW 0        ; temporary value
           010 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           011 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           012 : 7FFF;  -- c7FFF: DW &H7FFF
           013 : 0000;  -- m16sA: DW 0 ; multiplicand
           014 : 0000;  -- m16sB: DW 0 ; multipler
           015 : 0000;  -- m16sc: DW 0 ; carry
           016 : 0000;  -- mcnt16s: DW 0 ; counter
           017 : 0000;  -- mres16sL: DW 0 ; result low
           018 : 0000;  -- mres16sH: DW 0 ; result high
           019 : 0000;  -- d16sN: DW 0 ; numerator
           01A : 0000;  -- d16sD: DW 0 ; denominator
           01B : 0000;  -- d16sS: DW 0 ; sign value
           01C : 0000;  -- d16sT: DW 0 ; temp counter
           01D : 0000;  -- d16sC1: DW 0 ; carry value
           01E : 0000;  -- d16sC2: DW 0 ; carry value
           01F : 0000;  -- dres16sQ: DW 0 ; quotient result
           020 : 0000;  -- dres16sR: DW 0 ; remainder result
           021 : 0000;  -- L2X:  DW 0
           022 : 0000;  -- L2Y:  DW 0
           023 : 0000;  -- L2T1: DW 0
           024 : 0000;  -- L2T2: DW 0
           025 : 0000;  -- L2T3: DW 0
           026 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           027 : FFFF;  -- NegOne:   DW -1
           028 : 0000;  -- Zero:     DW 0
           029 : 0001;  -- One:      DW 1
           02A : 0002;  -- Two:      DW 2
           02B : 0003;  -- Three:    DW 3
           02C : 0004;  -- Four:     DW 4
           02D : 0005;  -- Five:     DW 5
           02E : 0006;  -- Six:      DW 6
           02F : 0007;  -- Seven:    DW 7
           030 : 0008;  -- Eight:    DW 8
           031 : 0009;  -- Nine:     DW 9
           032 : 000A;  -- Ten:      DW 10
           033 : 0001;  -- Mask0:    DW &B00000001
           034 : 0002;  -- Mask1:    DW &B00000010
           035 : 0004;  -- Mask2:    DW &B00000100
           036 : 0008;  -- Mask3:    DW &B00001000
           037 : 0010;  -- Mask4:    DW &B00010000
           038 : 0020;  -- Mask5:    DW &B00100000
           039 : 0040;  -- Mask6:    DW &B01000000
           03A : 0080;  -- Mask7:    DW &B10000000
           03B : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           03C : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           03D : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           03E : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           03F : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           040 : 0125;  -- OneFoot:  DW 293       ; ~2ft in 1.04mm units
           041 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           042 : 00B4;  -- Deg180:   DW 180       ; 180
           043 : 010E;  -- Deg270:   DW 270       ; 270
           044 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           045 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           046 : FF9C;  -- RSlow:    DW -100
           047 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           048 : FEA2;  -- RMid:     DW -350
           049 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           04A : FE0C;  -- RFast:    DW -500
           04B : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           04C : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           04D : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           04E : 0000;  -- getTime:	DW	&H00
           04F : 01B2;  -- LoopLength:	DW	434
           050 : 000A;  -- Opcode:		DW 	10	;bogus value to make sure no subroutine is executed upon startup
           051 : 8000;  -- Light17:	DW 	&H8000
           052 : 0041;  -- ASCII_A:	DW	&H41
           053 : 0042;  -- ASCII_B:	DW	&H42
           054 : 0043;  -- ASCII_C:	DW	&H43
           055 : 0044;  -- ASCII_D:	DW	&H44
           056 : 0045;  -- ASCII_E:	DW	&H45
           057 : 0046;  -- ASCII_F:	DW	&H46
           058 : 0047;  -- ASCII_G:	DW	&H47
           059 : 0048;  -- ASCII_H:	DW	&H48
           05A : 00FF;  -- UART_MASK:	DW	&H00FF
           05B : 0000;  -- UART_STATE:	DW	&H0000
           05C : 0000;  -- UARTWordIn:		DW	&H0000
           05D : 0000;  -- UARTWordOut:		DW	&H0000
           05E : 0828;  -- 	LOAD   Zero
           05F : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           060 : 988B;  -- 	OUT    RVELCMD
           061 : 1007;  -- 	STORE  DVel        ; Reset movement API variables
           062 : 1006;  -- 	STORE  DTheta
           063 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           064 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           065 : 827F;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           066 : 8263;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           067 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           068 : 0828;  -- 	LOAD   Zero
           069 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           06A : B832;  -- 	LOADI  50          ; fire at 10 Hz (10 ms * 10).
           06B : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           06C : A806;  -- 	SEI &B0110      ; enable interrupts from source 2 (Timer)
           06D : B930;  -- 	LOADI  &H130
           06E : 980A;  -- 	OUT    BEEP        ; Short hello beep
           06F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           070 : 4837;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           071 : 3877;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           072 : 9002;  -- 	IN     TIMER       ; Use the timer value to
           073 : 4834;  -- 	AND    Mask1       ; blink LED17 as a reminder to toggle SW17
           074 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           075 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           076 : 286F;  -- 	JUMP   WaitForSafety
           077 : 9002;  -- 	IN     TIMER       ; Used to blink the LEDs above PB3
           078 : 4834;  -- 	AND    Mask1
           079 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           07A : 1026;  -- 	STORE  Temp        ; (overkill, but looks nice)
           07B : 6001;  -- 	SHIFT  1
           07C : 5026;  -- 	OR     Temp
           07D : 9807;  -- 	OUT    XLEDS
           07E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           07F : 4835;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           080 : 3877;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           081 : 0828;  -- 	LOAD   Zero
           082 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           083 : B800;  -- 	LOADI  0
           084 : 1006;  -- 	STORE  DTheta      ; Desired angle 0
           085 : B800;  -- 	LOADI   0        ; Defined below as 350.
           086 : 1007;  -- 	STORE  DVel        ; Desired forward velocity
           087 : B834;  -- 	LOADI  52
           088 : 9898;  -- 	OUT   UART_DAT
           089 : B805;  -- 	LOADI	5
           08A : 9801;  -- 	OUT		LEDS
           08B : 80AA;  -- 	CALL	UART_Delay
           08C : B807;  -- 	LOADI	7
           08D : 9801;  -- 	OUT		LEDS
           08E : 085B;  -- 	LOAD	UART_STATE
           08F : 4091;  -- 	JZERO	SubroutineSelect
           090 : 2889;  -- 	JUMP	NoOpcode
           091 : 0850;  -- 	LOAD	Opcode
           092 : 6FF6;  -- 	ADDI	-10
           093 : 4089;  -- 	JZERO	NoOpcode
           094 : 180A;  -- 	ADD	10
           095 : 6FFB;  -- 	ADDI	-5
           096 : 4099;  -- 	JZERO	MoveForward
           097 : 6805;  -- 	ADDI	5
           098 : 2889;  -- 	JUMP	NoOpcode
           099 : B80A;  -- 	LOADI	10
           09A : 1050;  -- 	STORE	Opcode
           09B : B800;  -- 	LOADI  0
           09C : 1006;  -- 	STORE  DTheta      ; Desired angle 0
           09D : 085C;  -- 	LOAD   UARTWordIn	   ; Speed from UART
           09E : 1007;  -- 	STORE  DVel        ; Desired forward velocity
           09F : B800;  -- 	LOADI	0
           0A0 : 105D;  -- 	STORE	UARTWordOut
           0A1 : 2889;  -- 	JUMP	NoOpcode
           0A2 : 085D;  -- 	LOAD	UARTWordOut
           0A3 : 6018;  -- 	SHIFT	-8
           0A4 : 9898;  -- 	OUT	UART_DAT
           0A5 : 80AA;  -- 	CALL	UART_Delay
           0A6 : 085D;  -- 	LOAD	UARTWordOut
           0A7 : 9898;  -- 	OUT	UART_DAT
           0A8 : 80AA;  -- 	CALL	UART_Delay
           0A9 : 8800;  -- 	RETURN
           0AA : 084F;  -- 	LOAD	LoopLength
           0AB : 6FFF;  -- 	ADDI	-1
           0AC : 40AE;  -- 	JZERO	ExitDelay	
           0AD : 28AB;  -- 	JUMP	DelayContinue
           0AE : 8800;  -- 	RETURN
           0AF : 085B;  -- LOAD	UART_STATE
           0B0 : 9806;  -- out LCD
           0B1 : 40BA;  -- JZERO	GetOpcode
           0B2 : 9805;  -- out SSEG2
           0B3 : 6FFF;  -- ADDI	-1
           0B4 : 40F8;  -- JZERO	GetMSB
           0B5 : 6801;  -- ADDI	1
           0B6 : 6FFE;  -- ADDI	-2
           0B7 : 4101;  -- JZERO	GetLSB
           0B8 : B800;  -- LOADI	0
           0B9 : B000;  -- RETI
           0BA : B80A;  -- LOADI	10
           0BB : B801;  -- LOADI	1
           0BC : 105B;  -- STORE	UART_STATE
           0BD : 9098;  -- In UART_DAT
           0BE : 485A;  -- AND	UART_MASK
           0BF : 2052;  -- SUB ASCII_A
           0C0 : 40D8;  -- JZERO KeyA
           0C1 : 6852;  -- ADDI   ASCII_A
           0C2 : 2053;  -- SUB ASCII_B
           0C3 : 40DC;  -- JZERO KeyB
           0C4 : 6853;  -- ADDI   ASCII_B
           0C5 : 2054;  -- SUB ASCII_C
           0C6 : 40E0;  -- JZERO KeyC
           0C7 : 6854;  -- ADDI   ASCII_C
           0C8 : 2055;  -- SUB ASCII_D
           0C9 : 40E4;  -- JZERO KeyD
           0CA : 6855;  -- ADDI   ASCII_D
           0CB : 2056;  -- SUB ASCII_E
           0CC : 40E8;  -- JZERO KeyE
           0CD : 6856;  -- ADDI   ASCII_E
           0CE : 2057;  -- SUB ASCII_F
           0CF : 40EC;  -- JZERO KeyF
           0D0 : 6857;  -- ADDI   ASCII_F
           0D1 : 2059;  -- SUB ASCII_H
           0D2 : 40F4;  -- JZERO KeyH
           0D3 : 6859;  -- ADDI   ASCII_H
           0D4 : B800;  -- LOADI	0
           0D5 : 105B;  -- STORE	UART_STATE
           0D6 : 1050;  -- STORE	Opcode
           0D7 : B000;  -- RETI
           0D8 : B801;  -- LOADI	1
           0D9 : 1050;  -- STORE	Opcode
           0DA : 9805;  -- OUT	SSEG2
           0DB : B000;  -- RETI
           0DC : B802;  -- LOADI	2
           0DD : 1050;  -- STORE	Opcode
           0DE : 9805;  -- OUT	SSEG2
           0DF : B000;  -- RETI
           0E0 : B803;  -- LOADI	3
           0E1 : 1050;  -- STORE	Opcode
           0E2 : 9805;  -- OUT	SSEG2
           0E3 : B000;  -- RETI
           0E4 : B804;  -- LOADI	4
           0E5 : 1050;  -- STORE	Opcode
           0E6 : 9805;  -- OUT	SSEG2
           0E7 : B000;  -- RETI
           0E8 : B805;  -- LOADI	5
           0E9 : 1050;  -- STORE	Opcode
           0EA : 9805;  -- OUT	SSEG2
           0EB : B000;  -- RETI
           0EC : B806;  -- LOADI	6
           0ED : 1050;  -- STORE	Opcode
           0EE : 9805;  -- OUT	SSEG2
           0EF : B000;  -- RETI
           0F0 : B807;  -- LOADI	7
           0F1 : 1050;  -- STORE	Opcode
           0F2 : 9805;  -- OUT	SSEG2
           0F3 : B000;  -- RETI
           0F4 : B808;  -- LOADI	8
           0F5 : 1050;  -- STORE	Opcode
           0F6 : 9805;  -- OUT	SSEG2
           0F7 : B000;  -- RETI
           0F8 : B802;  -- LOADI	2
           0F9 : 105B;  -- STORE	UART_STATE
           0FA : 9098;  -- In	UART_DAT
           0FB : 485A;  -- AND	UART_MASK
           0FC : 6008;  -- SHIFT	8
           0FD : 105C;  -- STORE	UARTWordIn
           0FE : B85B;  -- LoadI	UART_STATE
           0FF : 9804;  -- out SSEG1
           100 : B000;  -- RETI
           101 : B80C;  -- LoadI	12
           102 : B800;  -- LOADI	0
           103 : 105B;  -- STORE	UART_STATE
           104 : 9098;  -- In	UART_DAT
           105 : 485A;  -- AND	UART_MASK
           106 : 505C;  -- OR	UARTWordIn
           107 : 105C;  -- STORE	UARTWordIn
           108 : B000;  -- RETI
           109 : 90C0;  -- 	IN     XPOS        ; X position from odometry
           10A : 9806;  -- 	OUT    LCD         ; Display X position for debugging
           10B : 203D;  -- 	SUB    OneMeter    ; Defined below as the robot units for 1 m
           10C : 3109;  -- 	JNEG   Test1       ; Not there yet, keep checking
           10D : B800;  -- 	LOADI  0
           10E : 1007;  -- 	STORE  DVel
           10F : B85A;  -- 	LOADI  90
           110 : 1006;  -- 	STORE  DTheta
           111 : 8164;  -- 	CALL   GetThetaErr ; get the heading error
           112 : 817D;  -- 	CALL   Abs         ; absolute value subroutine
           113 : 9806;  -- 	OUT    LCD         ; Display |angle error| for debugging
           114 : 6FFB;  -- 	ADDI   -5          ; check if within 5 degrees of target angle
           115 : 3911;  -- 	JPOS   Test2       ; if not, keep testing
           116 : 0845;  -- 	LOAD   FSlow       ; defined below as 100
           117 : 1007;  -- 	STORE  DVel
           118 : 90C1;  -- 	IN     YPOS        ; get the Y position from odometry
           119 : 203D;  -- 	SUB    OneMeter
           11A : 9806;  -- 	OUT    LCD         ; Display distance error for debugging
           11B : 3118;  -- 	JNEG   Test3       ; if not there, keep testing
           11C : 0849;  -- 	LOAD   FFast       ; defined below as 500
           11D : 1007;  -- 	STORE  DVel
           11E : 90C0;  -- 	IN     XPOS        ; get the X position from odometry
           11F : 817E;  -- 	CALL   Neg         ; negate
           120 : 100C;  -- 	STORE  AtanX
           121 : 90C1;  -- 	IN     YPOS        ; get the X position from odometry
           122 : 817E;  -- 	CALL   Neg         ; negate
           123 : 100D;  -- 	STORE  AtanY
           124 : 8181;  -- 	CALL   Atan2       ; Gets the angle from (0,0) to (AtanX,AtanY)
           125 : 1006;  -- 	STORE  DTheta
           126 : 90C0;  -- 	IN     XPOS
           127 : 1021;  -- 	STORE  L2X
           128 : 90C1;  -- 	IN     YPOS
           129 : 1022;  -- 	STORE  L2Y
           12A : 8233;  -- 	CALL   L2Estimate
           12B : 2040;  -- 	SUB    OneFoot
           12C : 391E;  -- 	JPOS   GoTo00      ; If >1 ft from destination, continue
           12D : B800;  -- 	LOADI  0
           12E : 1007;  -- 	STORE  DVel
           12F : 2930;  -- 	JUMP   Die
           130 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           131 : 0828;  -- 	LOAD   Zero        ; Stop everything.
           132 : 9883;  -- 	OUT    LVELCMD
           133 : 988B;  -- 	OUT    RVELCMD
           134 : 98B2;  -- 	OUT    SONAREN
           135 : 0805;  -- 	LOAD   DEAD        ; An indication that we are dead
           136 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           137 : 2937;  -- 	JUMP   Forever     ; Do this forever.
           138 : 813A;  -- 	CALL   ControlMovement
           139 : B000;  -- 	RETI   ; return from ISR
           13A : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           13B : 100B;  -- 	STORE  MaxVal
           13C : 8164;  -- 	CALL   GetThetaErr ; get the heading error
           13D : 6002;  -- 	SHIFT  2
           13E : 1008;  -- 	STORE  CMAErr      ; hold temporarily
           13F : 6002;  -- 	SHIFT  2           ; multiply by another 4
           140 : 816B;  -- 	CALL   CapValue    ; get a +/- max of 50
           141 : 1808;  -- 	ADD    CMAErr
           142 : 1008;  -- 	STORE  CMAErr      ; now contains a desired differential
           143 : B9FE;  -- 	LOADI  510
           144 : 100B;  -- 	STORE  MaxVal
           145 : 0807;  -- 	LOAD   DVel
           146 : 816B;  -- 	CALL   CapValue    ; ensure velocity is valid
           147 : 1007;  -- 	STORE  DVel        ; overwrite any invalid input
           148 : 1808;  -- 	ADD    CMAErr
           149 : 816B;  -- 	CALL   CapValue    ; ensure velocity is valid
           14A : 100A;  -- 	STORE  CMAR
           14B : 0808;  -- 	LOAD   CMAErr
           14C : 817E;  -- 	CALL   Neg         ; left wheel gets negative differential
           14D : 1807;  -- 	ADD    DVel
           14E : 816B;  -- 	CALL   CapValue
           14F : 1009;  -- 	STORE  CMAL
           150 : 0808;  -- 	LOAD   CMAErr
           151 : 6001;  -- 	SHIFT  1           ; double the differential
           152 : 1008;  -- 	STORE  CMAErr
           153 : 080A;  -- 	LOAD   CMAR
           154 : 2009;  -- 	SUB    CMAL        ; calculate the actual differential
           155 : 2008;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           156 : 415F;  -- 	JZERO  CMADone
           157 : 1008;  -- 	STORE  CMAErr      ; the missing part
           158 : 1809;  -- 	ADD    CMAL
           159 : 816B;  -- 	CALL   CapValue
           15A : 1009;  -- 	STORE  CMAL
           15B : 080A;  -- 	LOAD   CMAR
           15C : 2008;  -- 	SUB    CMAErr
           15D : 816B;  -- 	CALL   CapValue
           15E : 100A;  -- 	STORE  CMAR
           15F : 0809;  -- 	LOAD   CMAL
           160 : 9883;  -- 	OUT    LVELCMD
           161 : 080A;  -- 	LOAD   CMAR
           162 : 988B;  -- 	OUT    RVELCMD
           163 : 8800;  -- 	RETURN
           164 : 90C2;  -- 	IN     THETA
           165 : 2006;  -- 	SUB    DTheta      ; actual - desired angle
           166 : 817E;  -- 	CALL   Neg         ; desired - actual angle
           167 : 68B4;  -- 	ADDI   180
           168 : 8177;  -- 	CALL   Mod360
           169 : 6F4C;  -- 	ADDI   -180
           16A : 8800;  -- 	RETURN
           16B : 200B;  -- 	SUB     MaxVal
           16C : 3972;  -- 	JPOS    CapVelHigh
           16D : 180B;  -- 	ADD     MaxVal
           16E : 180B;  -- 	ADD     MaxVal
           16F : 3174;  -- 	JNEG    CapVelLow
           170 : 200B;  -- 	SUB     MaxVal
           171 : 8800;  -- 	RETURN
           172 : 080B;  -- 	LOAD    MaxVal
           173 : 8800;  -- 	RETURN
           174 : 080B;  -- 	LOAD    MaxVal
           175 : 817E;  -- 	CALL    Neg
           176 : 8800;  -- 	RETURN
           177 : 317A;  -- 	JNEG   M360N
           178 : 6E98;  -- 	ADDI   -360
           179 : 2977;  -- 	JUMP   Mod360
           17A : 6968;  -- 	ADDI   360
           17B : 317A;  -- 	JNEG   M360N
           17C : 8800;  -- 	RETURN
           17D : 3980;  -- 	JPOS   Abs_r
           17E : 5827;  -- 	XOR    NegOne       ; Flip all bits
           17F : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           180 : 8800;  -- 	RETURN
           181 : 080D;  -- 	LOAD   AtanY
           182 : 817D;  -- 	CALL   Abs          ; abs(y)
           183 : 100F;  -- 	STORE  AtanT
           184 : 080C;  -- 	LOAD   AtanX        ; abs(x)
           185 : 817D;  -- 	CALL   Abs
           186 : 200F;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           187 : 3192;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           188 : 080C;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           189 : 318F;  -- 	JNEG   A2_R3
           18A : 81A1;  -- 	CALL   A2_calc      ; Octants 1, 8
           18B : 318D;  -- 	JNEG   A2_R1n
           18C : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           18D : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           18E : 8800;  -- 	RETURN
           18F : 81A1;  -- 	CALL   A2_calc      ; Octants 4, 5            
           190 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           191 : 8800;  -- 	RETURN
           192 : 080D;  -- 	LOAD   AtanY        ; Swap input arguments
           193 : 100F;  -- 	STORE  AtanT
           194 : 080C;  -- 	LOAD   AtanX
           195 : 100D;  -- 	STORE  AtanY
           196 : 080F;  -- 	LOAD   AtanT
           197 : 100C;  -- 	STORE  AtanX
           198 : 399D;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           199 : 81A1;  -- 	CALL   A2_calc      ; else octants 6, 7
           19A : 817E;  -- 	CALL   Neg          ; Negatge the number
           19B : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           19C : 8800;  -- 	RETURN
           19D : 81A1;  -- 	CALL   A2_calc      ; Octants 2, 3
           19E : 817E;  -- 	CALL   Neg          ; negate the angle
           19F : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           1A0 : 8800;  -- 	RETURN
           1A1 : 080D;  -- 	LOAD   AtanY
           1A2 : 1019;  -- 	STORE  d16sN        ; Y in numerator
           1A3 : 080C;  -- 	LOAD   AtanX
           1A4 : 101A;  -- 	STORE  d16sD        ; X in denominator
           1A5 : 81CD;  -- 	CALL   A2_div       ; divide
           1A6 : 081F;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           1A7 : 100E;  -- 	STORE  AtanRatio
           1A8 : 1013;  -- 	STORE  m16sA
           1A9 : 1014;  -- 	STORE  m16sB
           1AA : 81C4;  -- 	CALL   A2_mult      ; X^2
           1AB : 1013;  -- 	STORE  m16sA
           1AC : 0810;  -- 	LOAD   A2c
           1AD : 1014;  -- 	STORE  m16sB
           1AE : 81C4;  -- 	CALL   A2_mult
           1AF : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           1B0 : 101A;  -- 	STORE  d16sD
           1B1 : 080E;  -- 	LOAD   AtanRatio
           1B2 : 1019;  -- 	STORE  d16sN        ; Ratio in numerator
           1B3 : 81CD;  -- 	CALL   A2_div       ; divide
           1B4 : 081F;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           1B5 : 1013;  -- 	STORE  m16sA        ; <= result in radians
           1B6 : 0811;  -- 	LOAD   A2cd         ; degree conversion factor
           1B7 : 1014;  -- 	STORE  m16sB
           1B8 : 81C4;  -- 	CALL   A2_mult      ; convert to degrees
           1B9 : 100F;  -- 	STORE  AtanT
           1BA : 6017;  -- 	SHIFT  -7           ; check 7th bit
           1BB : 4829;  -- 	AND    One
           1BC : 41C1;  -- 	JZERO  A2_rdwn      ; round down
           1BD : 080F;  -- 	LOAD   AtanT
           1BE : 6018;  -- 	SHIFT  -8
           1BF : 6801;  -- 	ADDI   1            ; round up
           1C0 : 8800;  -- 	RETURN
           1C1 : 080F;  -- 	LOAD   AtanT
           1C2 : 6018;  -- 	SHIFT  -8           ; round down
           1C3 : 8800;  -- 	RETURN
           1C4 : 81E0;  -- 	CALL   Mult16s
           1C5 : 0818;  -- 	LOAD   mres16sH
           1C6 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           1C7 : 1018;  -- 	STORE  mres16sH
           1C8 : 0817;  -- 	LOAD   mres16sL
           1C9 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           1CA : 483B;  -- 	AND    LowByte
           1CB : 5018;  -- 	OR     mres16sH     ; combine high and low words of result
           1CC : 8800;  -- 	RETURN
           1CD : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           1CE : 100F;  -- 	STORE  AtanT
           1CF : 080F;  -- 	LOAD   AtanT
           1D0 : 6FFF;  -- 	ADDI   -1
           1D1 : 39D4;  -- 	JPOS   A2_DN        ; not done; continue shifting
           1D2 : 8202;  -- 	CALL   Div16s       ; do the standard division
           1D3 : 8800;  -- 	RETURN
           1D4 : 100F;  -- 	STORE  AtanT
           1D5 : 0819;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           1D6 : 6001;  -- 	SHIFT  1
           1D7 : 5819;  -- 	XOR    d16sN        ; if the sign changed,
           1D8 : 31DC;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1D9 : 5819;  -- 	XOR    d16sN        ; get back shifted version
           1DA : 1019;  -- 	STORE  d16sN
           1DB : 29CF;  -- 	JUMP   A2_DL
           1DC : 081A;  -- 	LOAD   d16sD
           1DD : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1DE : 101A;  -- 	STORE  d16sD
           1DF : 29CF;  -- 	JUMP   A2_DL
           1E0 : B800;  -- 	LOADI  0
           1E1 : 1015;  -- 	STORE  m16sc        ; clear carry
           1E2 : 1018;  -- 	STORE  mres16sH     ; clear result
           1E3 : B810;  -- 	LOADI  16           ; load 16 to counter
           1E4 : 1016;  -- 	STORE  mcnt16s      
           1E5 : 0815;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           1E6 : 41EA;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           1E7 : 0818;  -- 	LOAD   mres16sH     ; if a carry, 
           1E8 : 1813;  -- 	ADD    m16sA        ;  add multiplicand to result H
           1E9 : 1018;  -- 	STORE  mres16sH
           1EA : 0814;  -- 	LOAD   m16sB
           1EB : 4829;  -- 	AND    One          ; check bit 0 of multiplier
           1EC : 1015;  -- 	STORE  m16sc        ; save as next carry
           1ED : 41F1;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           1EE : 0818;  -- 	LOAD   mres16sH     ; if bit 0 set,
           1EF : 2013;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           1F0 : 1018;  -- 	STORE  mres16sH
           1F1 : 0814;  -- 	LOAD   m16sB
           1F2 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1F3 : 4812;  -- 	AND    c7FFF        ; clear msb
           1F4 : 1014;  -- 	STORE  m16sB
           1F5 : 0818;  -- 	LOAD   mres16sH     ; load result H
           1F6 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1F7 : 5014;  -- 	OR     m16sB
           1F8 : 1014;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1F9 : 0818;  -- 	LOAD   mres16sH
           1FA : 6011;  -- 	SHIFT  -1
           1FB : 1018;  -- 	STORE  mres16sH     ; shift result H >>1
           1FC : 0816;  -- 	LOAD   mcnt16s
           1FD : 6FFF;  -- 	ADDI   -1           ; check counter
           1FE : 39E4;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1FF : 0814;  -- 	LOAD   m16sB
           200 : 1017;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           201 : 8800;  -- 	RETURN              ; Done
           202 : B800;  -- 	LOADI  0
           203 : 1020;  -- 	STORE  dres16sR     ; clear remainder result
           204 : 101D;  -- 	STORE  d16sC1       ; clear carry
           205 : 0819;  -- 	LOAD   d16sN
           206 : 581A;  -- 	XOR    d16sD
           207 : 101B;  -- 	STORE  d16sS        ; sign determination = N XOR D
           208 : B811;  -- 	LOADI  17
           209 : 101C;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           20A : 081A;  -- 	LOAD   d16sD
           20B : 817D;  -- 	CALL   Abs          ; take absolute value of denominator
           20C : 101A;  -- 	STORE  d16sD
           20D : 0819;  -- 	LOAD   d16sN
           20E : 817D;  -- 	CALL   Abs          ; take absolute value of numerator
           20F : 1019;  -- 	STORE  d16sN
           210 : 0819;  -- 	LOAD   d16sN
           211 : 601F;  -- 	SHIFT  -15          ; get msb
           212 : 4829;  -- 	AND    One          ; only msb (because shift is arithmetic)
           213 : 101E;  -- 	STORE  d16sC2       ; store as carry
           214 : 0819;  -- 	LOAD   d16sN
           215 : 6001;  -- 	SHIFT  1            ; shift <<1
           216 : 501D;  -- 	OR     d16sC1       ; with carry
           217 : 1019;  -- 	STORE  d16sN
           218 : 081C;  -- 	LOAD   d16sT
           219 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           21A : 422A;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           21B : 101C;  -- 	STORE  d16sT
           21C : 0820;  -- 	LOAD   dres16sR
           21D : 6001;  -- 	SHIFT  1            ; shift remainder
           21E : 501E;  -- 	OR     d16sC2       ; with carry from other shift
           21F : 201A;  -- 	SUB    d16sD        ; subtract denominator from remainder
           220 : 3225;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           221 : 1020;  -- 	STORE  dres16sR
           222 : B801;  -- 	LOADI  1
           223 : 101D;  -- 	STORE  d16sC1       ; set carry
           224 : 2A10;  -- 	JUMP   Div16s_loop
           225 : 181A;  -- 	ADD    d16sD        ; add denominator back in
           226 : 1020;  -- 	STORE  dres16sR
           227 : B800;  -- 	LOADI  0
           228 : 101D;  -- 	STORE  d16sC1       ; clear carry
           229 : 2A10;  -- 	JUMP   Div16s_loop
           22A : 0819;  -- 	LOAD   d16sN
           22B : 101F;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           22C : 081B;  -- 	LOAD   d16sS        ; check the sign indicator
           22D : 322F;  -- 	JNEG   Div16s_neg
           22E : 8800;  -- 	RETURN
           22F : 081F;  -- 	LOAD   dres16sQ     ; need to negate the result
           230 : 817E;  -- 	CALL   Neg
           231 : 101F;  -- 	STORE  dres16sQ
           232 : 8800;  -- 	RETURN	
           233 : 0821;  -- 	LOAD   L2X
           234 : 817D;  -- 	CALL   Abs
           235 : 1023;  -- 	STORE  L2T1
           236 : 0822;  -- 	LOAD   L2Y
           237 : 817D;  -- 	CALL   Abs
           238 : 2023;  -- 	SUB    L2T1
           239 : 3255;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           23A : 1823;  -- 	ADD    L2T1
           23B : 1013;  -- 	STORE  m16sa
           23C : B8F6;  -- 	LOADI  246       ; max * 246
           23D : 1014;  -- 	STORE  m16sB
           23E : 81E0;  -- 	CALL   Mult16s
           23F : 0818;  -- 	LOAD   mres16sH
           240 : 6008;  -- 	SHIFT  8
           241 : 1024;  -- 	STORE  L2T2
           242 : 0817;  -- 	LOAD   mres16sL
           243 : 6018;  -- 	SHIFT  -8        ; / 256
           244 : 483B;  -- 	AND    LowByte
           245 : 5024;  -- 	OR     L2T2
           246 : 1025;  -- 	STORE  L2T3
           247 : 0823;  -- 	LOAD   L2T1
           248 : 1013;  -- 	STORE  m16sa
           249 : B868;  -- 	LOADI  104       ; min * 104
           24A : 1014;  -- 	STORE  m16sB
           24B : 81E0;  -- 	CALL   Mult16s
           24C : 0818;  -- 	LOAD   mres16sH
           24D : 6008;  -- 	SHIFT  8
           24E : 1024;  -- 	STORE  L2T2
           24F : 0817;  -- 	LOAD   mres16sL
           250 : 6018;  -- 	SHIFT  -8        ; / 256
           251 : 483B;  -- 	AND    LowByte
           252 : 5024;  -- 	OR     L2T2
           253 : 1825;  -- 	ADD    L2T3     ; sum
           254 : 8800;  -- 	RETURN
           255 : 1823;  -- 	ADD    L2T1
           256 : 1024;  -- 	STORE  L2T2
           257 : 0823;  -- 	LOAD   L2T1
           258 : 1025;  -- 	STORE  L2T3
           259 : 0824;  -- 	LOAD   L2T2
           25A : 1023;  -- 	STORE  L2T1
           25B : 0825;  -- 	LOAD   L2T3
           25C : 2A3B;  -- 	JUMP   CalcDist
           25D : 9802;  -- 	OUT    TIMER
           25E : 9002;  -- 	IN     TIMER
           25F : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           260 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           261 : 325E;  -- 	JNEG   Wloop
           262 : 8800;  -- 	RETURN
           263 : 8279;  -- 	CALL   GetBattLvl
           264 : 4263;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           265 : 204B;  -- 	SUB    MinBatt
           266 : 3269;  -- 	JNEG   DeadBatt
           267 : 184B;  -- 	ADD    MinBatt     ; get original value back
           268 : 8800;  -- 	RETURN
           269 : B820;  -- 	LOADI  &H20
           26A : 980A;  -- 	OUT    BEEP        ; start beep sound
           26B : 8279;  -- 	CALL   GetBattLvl  ; get the battery level
           26C : 9806;  -- 	OUT    LCD
           26D : 0828;  -- 	LOAD   Zero
           26E : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           26F : 9801;  -- 	OUT    LEDS        ; all LEDs on
           270 : 9807;  -- 	OUT    XLEDS
           271 : 825D;  -- 	CALL   Wait1       ; 1 second
           272 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           273 : 980A;  -- 	OUT    BEEP        ; stop beeping
           274 : 0828;  -- 	LOAD   Zero
           275 : 9801;  -- 	OUT    LEDS        ; LEDs off
           276 : 9807;  -- 	OUT    XLEDS
           277 : 825D;  -- 	CALL   Wait1       ; 1 second
           278 : 2A69;  -- 	JUMP   DeadBatt    ; repeat forever
           279 : 084D;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           27A : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           27B : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           27C : 8287;  -- 	CALL   BlockI2C    ; wait for it to finish
           27D : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           27E : 8800;  -- 	RETURN
           27F : 8287;  -- 	CALL   BlockI2C    ; wait for idle
           280 : 084C;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           281 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           282 : 0828;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           283 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           284 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           285 : 8287;  -- 	CALL   BlockI2C    ; wait for it to finish
           286 : 8800;  -- 	RETURN
           287 : 0828;  -- 	LOAD   Zero
           288 : 1026;  -- 	STORE  Temp        ; Used to check for timeout
           289 : 0826;  -- 	LOAD   Temp
           28A : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           28B : 1026;  -- 	STORE  Temp
           28C : 4290;  -- 	JZERO  I2CError    ; Timeout occurred; error
           28D : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           28E : 3A89;  -- 	JPOS   BI2CL       ; If not 0, try again
           28F : 8800;  -- 	RETURN             ; Else return
           290 : 0828;  -- 	LOAD   Zero
           291 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           292 : 2A90;  -- 	JUMP   I2CError
  END;
